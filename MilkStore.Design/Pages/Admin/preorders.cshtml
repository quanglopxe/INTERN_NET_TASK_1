@page
@{
    Layout = "_Layout.admin";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Danh sách đơn đặt hàng trước</h2>
        @if (User.IsInRole("Member"))
        {
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createPreOrderModal">
                <i class="fas fa-plus"></i> Tạo đơn mới
            </button>
        }
    </div>

    <!-- Search box -->
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" id="searchId" placeholder="Tìm theo ID...">
                <button class="btn btn-primary" id="btnSearch">
                    <i class="fas fa-search"></i> Tìm kiếm
                </button>
            </div>
        </div>
    </div>

    <!-- Pre-Orders Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Thông tin đơn hàng</th>
                    <th>Trạng thái</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody id="preOrdersList">
                <!-- Dữ liệu sẽ được load động -->
            </tbody>
        </table>
    </div>

    <!-- Phân trang -->
    <div class="d-flex justify-content-between align-items-center">
        <div class="form-group">
            <select id="pageSize" class="form-select">
                <option value="10">10 dòng</option>
                <option value="20">20 dòng</option>
                <option value="50">50 dòng</option>
            </select>
        </div>
        <nav>
            <ul class="pagination" id="pagination">
                <!-- Phân trang sẽ được load động -->
            </ul>
        </nav>
    </div>
</div>

<!-- Modal tạo Pre-Order -->
<div class="modal fade" id="createPreOrderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Tạo đơn đặt hàng trước</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="preOrderForm" onsubmit="return false;">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Thông tin sản phẩm</label>
                        <input type="text" class="form-control" name="productInfo" required>
                    </div>
                    <!-- Thêm các trường khác tùy theo PreOrdersModelView -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="submit" class="btn btn-primary" id="btnSubmit">
                        <i class="fas fa-save"></i> Đặt hàng
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Khởi tạo các biến
        let currentPage = 1;
        const defaultPageSize = 10;

        // Load dữ liệu khi trang được load
        $(document).ready(function () {
            loadPreOrders();
            
            // Xử lý sự kiện tìm kiếm
            $("#btnSearch").click(function() {
                currentPage = 1;
                loadPreOrders();
            });

            // Xử lý sự kiện thay đổi pageSize
            $("#pageSize").change(function() {
                currentPage = 1;
                loadPreOrders();
            });

            // Xử lý submit form
            $("#preOrderForm").submit(function(e) {
                e.preventDefault();
                createPreOrder();
            });
        });

        // Hàm load danh sách Pre-Orders
        async function loadPreOrders() {
            try {
                const searchId = $("#searchId").val();
                const pageSize = $("#pageSize").val();
                
                showLoading();
                
                const response = await fetch(`/api/PreOrders?id=${searchId}&pageIndex=${currentPage}&pageSize=${pageSize}`);
                const data = await response.json();
                
                renderPreOrders(data);
                renderPagination(data.totalPages);
                
                hideLoading();
            } catch (error) {
                console.error('Error:', error);
                toastr.error('Có lỗi xảy ra khi tải dữ liệu');
                hideLoading();
            }
        }

        // Hàm render dữ liệu vào bảng
        function renderPreOrders(data) {
            const tbody = $("#preOrdersList");
            tbody.empty();

            data.items.forEach(item => {
                const row = `
                    <tr>
                        <td>${item.id}</td>
                        <td>${item.productInfo}</td>
                        <td>${item.status}</td>
                        <td>
                            ${User.IsInRole("Member") ? 
                                `<button class="btn btn-danger btn-sm" onclick="deletePreOrder('${item.id}')">
                                    <i class="fas fa-trash"></i> Xóa
                                </button>` : ''
                            }
                        </td>
                    </tr>
                `;
                tbody.append(row);
            });
        }

        // Hàm tạo Pre-Order mới
        async function createPreOrder() {
            try {
                const formData = new FormData(document.getElementById('preOrderForm'));
                const data = Object.fromEntries(formData);

                showLoading();
                
                const response = await fetch('/api/PreOrders', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    toastr.success('Đặt hàng trước thành công!');
                    $('#createPreOrderModal').modal('hide');
                    loadPreOrders();
                }
            } catch (error) {
                console.error('Error:', error);
                toastr.error('Có lỗi xảy ra khi tạo đơn hàng');
            } finally {
                hideLoading();
            }
        }

        // Hàm xóa Pre-Order
        async function deletePreOrder(id) {
            if (confirm('Bạn có chắc muốn xóa đơn hàng này?')) {
                try {
                    showLoading();
                    
                    const response = await fetch(`/api/PreOrders/${id}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        toastr.success('Xóa đơn hàng đặt trước thành công!');
                        loadPreOrders();
                    }
                } catch (error) {
                    console.error('Error:', error);
                    toastr.error('Có lỗi xảy ra khi xóa đơn hàng');
                } finally {
                    hideLoading();
                }
            }
        }

        // Các hàm tiện ích
        function showLoading() {
            // Thêm code hiển thị loading spinner
        }

        function hideLoading() {
            // Thêm code ẩn loading spinner
        }

        function renderPagination(totalPages) {
            const pagination = $("#pagination");
            pagination.empty();

            // Thêm nút Previous
            pagination.append(`
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Previous</a>
                </li>
            `);

            // Thêm các nút số trang
            for (let i = 1; i <= totalPages; i++) {
                pagination.append(`
                    <li class="page-item ${currentPage === i ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                    </li>
                `);
            }

            // Thêm nút Next
            pagination.append(`
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Next</a>
                </li>
            `);
        }

        function changePage(page) {
            currentPage = page;
            loadPreOrders();
        }
    </script>
}
